import Subscriber from '../../models/subscriber.js'
import { InlineKeyboard } from 'grammy'
import { replyAndDel, deleteMsg, deleteMsgTime } from './functions.js'

const setSubTime = (days) => {
	days = Math.min(Math.max(days, 1), 10000)
	return new Date(Date.now() + (days * 24 * 3600 * 1000))
}

const checkID = (id) => /^[0-9]{17}$/.test(id)

export async function addSub(conversation, ctx) {
	try {
		let ask = await ctx.reply('‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ SteamID –ø–æ–¥–ø–∏—Å—á–∏–∫–∞', {
			reply_markup: new InlineKeyboard().text('üö´ –û—Ç–º–µ–Ω–∏—Ç—å')
		}); 
		ctx = await conversation.wait();
		deleteMsg(ctx, ask.chat.id, ask.message_id)
		if (ctx.update.callback_query?.data) return
		let id = ctx.msg.text; 
		if (!checkID(id)) {
			replyAndDel(ctx, `‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ SteamID`)
			return
		}
		let ask2 = await ctx.reply('‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ –¥–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏');
		ctx = await conversation.wait();
		deleteMsg(ctx, ask2.chat.id, ask2.message_id)
		let ttl = ctx.msg.text;
		if (isNaN(ttl)) {
			replyAndDel(ctx, `‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ`)
			return
		}
		let subscriber = await Subscriber.findOne({ id })
		if (subscriber) {
			replyAndDel(ctx, `‚ÑπÔ∏è –ü–æ–¥–ø–∏—Å—á–∏–∫ ${id} —É–∂–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω`)
		} else {
			let subscriber = new Subscriber({ id, expirationDate: setSubTime(ttl) })
			await subscriber.save()
			replyAndDel(ctx, `‚úÖ –ü–æ–¥–ø–∏—Å—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω`) 
		}
	} catch (error) {
		console.log('Bot admin error:', error)
		replyAndDel(ctx, `–û—à–∏–±–∫–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö`)
	}
}

export async function deleteSub(conversation, ctx) {
	try {
		let ask = await ctx.reply('‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ SteamID –ø–æ–¥–ø–∏—Å—á–∏–∫–∞', {
			reply_markup: new InlineKeyboard().text('üö´ –û—Ç–º–µ–Ω–∏—Ç—å')
		});
		ctx = await conversation.wait();
		deleteMsg(ctx, ask.chat.id, ask.message_id)
		if (ctx.update.callback_query?.data) return
		let id = ctx.msg.text;
		if (!checkID(id)) {
			replyAndDel(ctx, `‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ SteamID`)
			return
		}
		let subscriber = await Subscriber.findOne({ id })
		if (subscriber) {
			await subscriber.deleteOne()
			replyAndDel(ctx, `‚úÖ –ü–æ–¥–ø–∏—Å—á–∏–∫ ${id} —É–¥–∞–ª–µ–Ω`)
		} else {
			replyAndDel(ctx, `‚ÑπÔ∏è –ü–æ–¥–ø–∏—Å—á–∏–∫ ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`)
		}
	} catch (error) {
		console.log('Bot admin error:', error)
		replyAndDel(ctx, `–û—à–∏–±–∫–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö`)
	}
}

export async function updateSub(conversation, ctx) {
	try {
		let ask = await ctx.reply('‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ SteamID –ø–æ–¥–ø–∏—Å—á–∏–∫–∞', {
			reply_markup: new InlineKeyboard().text('üö´ Cancel')
		});
		ctx = await conversation.wait();
		deleteMsg(ctx, ask.chat.id, ask.message_id)
		if (ctx.update.callback_query?.data) return
		let id = ctx.msg.text;
		if (!checkID(id)) {
			replyAndDel(ctx, `‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ SteamID`)
			return
		}
		let subscriber = await Subscriber.findOne({ id })
		if (subscriber) {
			let ask2 = await ctx.reply('‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏');
			ctx = await conversation.wait();
			deleteMsg(ctx, ask2.chat.id, ask2.message_id)
			let ttl = ctx.msg.text;
			if (isNaN(ttl)) {
				replyAndDel(ctx, `‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ`)
				return
			}
			await subscriber.updateOne({ expirationDate: setSubTime(ttl) })
			replyAndDel(ctx, `‚úÖ –ü–æ–¥–ø–∏—Å—á–∏–∫ ${id} –æ–±–Ω–æ–≤–ª–µ–Ω`)
		} else {
			replyAndDel(ctx, `‚ÑπÔ∏è –ü–æ–¥–ø–∏—Å—á–∏–∫ ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`)
		}
	} catch (error) {
		console.log('Bot admin error:', error)
		replyAndDel(ctx, `–û—à–∏–±–∫–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö`)
	}
}